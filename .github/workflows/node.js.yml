# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Accessibility-aware CI Demo

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        # node-version: [10.x, 12.x, 14.x]
        node-version: [10.x]

    steps:
    - name: Use git to pull the latest source code into the test environment
      uses: actions/checkout@v2

    - name: tests using Node.js version ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache yarn modules (don't refetch from internet if possible)
      uses: actions/cache@v2
      with:
        path: |
          ~/.npm
          ~/.cache/yarn
          node_modules
        key: v1-yarn-deps-${{ hashFiles('yarn.lock') }}
        restore-keys: v1-yarn-deps-

    - name: Cache react modules (don't refetch from internet if possible)
      uses: actions/cache@v2
      with:
        path: packages/react/node_modules
        key: v1-react-deps-${{ hashFiles('packages/react/yarn.lock') }}
        restore-keys: v1-react-deps-

    - name: Cache styles modules (don't refetch from internet if possible)
      uses: actions/cache@v2
      with:
        path: packages/styles/node_modules
        key: v1-styles-deps-${{ hashFiles('packages/styles/yarn.lock') }}
        restore-keys: v1-styles-deps-

    - name: Ensure yarn and lerna tooling is initialized
      run: yarn && npx lerna bootstrap

    - name: Build monorepo styles project and the react project
      run: NODE_ENV=production yarn --cwd=packages/styles build && NODE_ENV=production yarn --cwd=packages/react build

    - name: Perform unit tests (a11y and functional) against the react code
      run: yarn --cwd=packages/react test

    - name: Run the site in dev mode and keep it running for the following full site scans
      run: yarn dev &

    - name: Use Pa11y with the Axe ruleset to check every page of our running site
      run: sleep 5 && yarn test-pa11y-axe
      continue-on-error: true

    - name: View the Pa11y Axe results
      run: yarn print-pa11y-axe-cli-results
      continue-on-error: true

    - name: Use Pa11y with the HTMLCodeSniffer ruleset to check every page of our running site
      run: yarn test-pa11y-htmlcs
      continue-on-error: true

    - name: View the Pa11y HTMLCodesniffer results
      run: yarn print-pa11y-htmlcs-cli-results
      continue-on-error: true

    - name: Build the html report from the Pa11y Axe ruleset results
      run: yarn generate-pa11y-axe-report
      continue-on-error: true

    - name: Build the html report from the Pa11y HTMLCodeSniffer results
      run: yarn generate-pa11y-htmlcs-report
      continue-on-error: true
    - run: yarn build

    - name: Archive reports and site and keep for downloading
      uses: actions/upload-artifact@v2
      with:
        name: docs-dist-files
        path: docs/dist

    - name: Upload the generated website and Pa11y reports to their hosting location on AWS S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
        SOURCE_DIR: 'docs/dist'
